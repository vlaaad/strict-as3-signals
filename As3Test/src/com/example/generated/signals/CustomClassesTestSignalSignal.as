/**
 * WARNING: THIS FILE IS AUTOGENERATED!
 */
package com.example.generated.signals {

import com.example.Attribute;

public class CustomClassesTestSignalSignal {
	private var _head:Node;
	private var _tail:Node;

	public function CustomClassesTestSignalSignal() {

	}

	public function add(listener:ICustomClassesTestSignalHandler):void {
		register(listener, false);
	}

	public function addOnce(listener:ICustomClassesTestSignalHandler):void {
		register(listener, true);
	}

	private function register(listener:ICustomClassesTestSignalHandler, once:Boolean):void {
		var node:Node = getNode(listener);
		if (node) {
			if (node.once) throw new Error("Illegal operation: adding listener that was added once");
			return;
		}
		node = new Node(listener, once);
		if (_tail) {
			_tail.next = node;
			_tail = node;
		} else {
			_head = node;
			_tail = node;
		}
	}

	public function remove(listener:ICustomClassesTestSignalHandler):void {
		var node:Node = _head;
		var prev:Node = null;
		while (node) {
			if (node.listener == listener) {
				removeNode(prev, node);
			}
			prev = node;
			node = node.next;
		}
	}

	public function clear():void {
		_head = null;
		_tail = null;
	}

	public function has(listener:ICustomClassesTestSignalHandler):Boolean {
		return getNode(listener) != null;
	}

	private function getNode(listener:ICustomClassesTestSignalHandler):Node {
		var node:Node = _head;
		while (node) {
			if (node.listener == listener) return node;
			node = node.next;
		}
		return null;
	}

	private function removeNode(prev:Node, node:Node):void {
	    if (prev) {
	        if (node.next) {
                prev.next = node.next;
	        } else {
                prev.next = null;
                _tail = prev;
	        }
	    } else {
	        if (node.next) {
                _head = node.next;
	        } else {
	            _head = null;
	            _tail = null;
	        }
	    }
	}

	public function dispatch(attribute:com.example.Attribute, value:int):void {
		var node:Node = _head;
		var prev:Node = null;
		while (node) {
			node.listener.handleCustomClassesTestSignal(attribute, value);
			if (node.once) {
				removeNode(prev, node);
			}
			prev = node;
			node = node.next;
		}
	}
}
}

import com.example.generated.signals.ICustomClassesTestSignalHandler;

class Node {
	public var next:Node;
	public var listener:ICustomClassesTestSignalHandler;
	public var once:Boolean;

	public function Node(listener:ICustomClassesTestSignalHandler, once:Boolean) {
		this.listener = listener;
		this.once = once;
	}
}