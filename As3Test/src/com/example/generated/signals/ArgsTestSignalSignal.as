/**
 * WARNING: THIS FILE IS AUTOGENERATED!
 */
package com.example.generated.signals {


public class ArgsTestSignalSignal {
	private var _head:Node;
	private var _tail:Node;

    private var _dispatching:Boolean;
    private var _queueHead:QueueNode;
    private var _queueTail:QueueNode;

public function ArgsTestSignalSignal() {

	}

	public function add(listener:IArgsTestSignalHandler):void {
		register(listener, false);
	}

	public function addOnce(listener:IArgsTestSignalHandler):void {
		register(listener, true);
	}

	private function register(listener:IArgsTestSignalHandler, once:Boolean):void {
		if (_dispatching) {
			addQueueNode(true, once, listener);
			return;
		}
		var node:Node = getNode(listener);
		if (node) {
			if (node.once) throw new Error("Illegal operation: adding listener that was added once");
			return;
		}
		node = new Node(listener, once);
		if (_tail) {
			_tail.next = node;
			_tail = node;
		} else {
			_head = node;
			_tail = node;
		}
	}

	private function addQueueNode(add:Boolean, once:Boolean, listener:IArgsTestSignalHandler):void {
		if (!_queueTail) {
			var queueNode:QueueNode = new QueueNode(add, listener, once);
			_queueHead = queueNode;
			_queueTail = queueNode;
		} else {
			queueNode = new QueueNode(add, listener, once);
			_queueTail.next = queueNode;
			_queueTail = queueNode;
		}
	}

	public function remove(listener:IArgsTestSignalHandler):void {
		if (_dispatching) {
			addQueueNode(false, false, listener);
			return;
		}
		var node:Node = _head;
		var prev:Node = null;
		while (node) {
			if (node.listener == listener) {
				removeNode(prev, node);
                return;
			}
			prev = node;
			node = node.next;
		}
	}

	public function clear():void {
		_head = null;
		_tail = null;
	}

	public function has(listener:IArgsTestSignalHandler):Boolean {
		var exists:Boolean = getNode(listener) != null;
		if (_dispatching) {
			var queueNode:QueueNode = _queueHead;
			while (queueNode) {
				if (queueNode.listener == listener) {
					exists = queueNode.add;
				}
				queueNode = queueNode.next;
			}
		}
		return exists;
	}

	private function getNode(listener:IArgsTestSignalHandler):Node {
		var node:Node = _head;
		while (node) {
			if (node.listener == listener) return node;
			node = node.next;
		}
		return null;
	}

	private function removeNode(prev:Node, node:Node):void {
	    if (prev) {
	        if (node.next) {
                prev.next = node.next;
	        } else {
                prev.next = null;
                _tail = prev;
	        }
	    } else {
	        if (node.next) {
                _head = node.next;
	        } else {
	            _head = null;
	            _tail = null;
	        }
	    }
	}

	public function dispatch(object:Object, count:int, string:String):void {
		var node:Node = _head;
		var prev:Node = null;
        _dispatching = true;
		while (node) {
			node.listener.handleArgsTestSignal(object, count, string);
			if (node.once) {
				removeNode(prev, node);
			} else {
                prev = node;
            }
			node = node.next;
		}
		_dispatching = false;

		var queueNode:QueueNode = _queueHead;
		while (queueNode) {
			if (queueNode.add) {
				register(queueNode.listener, queueNode.once);
			} else {
				remove(queueNode.listener);
			}
			queueNode = queueNode.next;
		}
		_queueHead = null;
		_queueTail = null;
	}
}
}

import com.example.generated.signals.IArgsTestSignalHandler;

class Node {
	public var next:Node;
	public var listener:IArgsTestSignalHandler;
	public var once:Boolean;

	public function Node(listener:IArgsTestSignalHandler, once:Boolean) {
		this.listener = listener;
		this.once = once;
	}
}
class QueueNode {

	public var add:Boolean;
	public var listener:IArgsTestSignalHandler;
	public var once:Boolean;
	public var next:QueueNode;

	public function QueueNode(add:Boolean, listener:IArgsTestSignalHandler, once:Boolean) {
		this.add = add;
		this.listener = listener;
		this.once = once;
	}
}